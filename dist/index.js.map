{"version":3,"sources":["../src/index.js"],"names":["EQUALS","EQ","GREATER","GT","GREATER_OR_EQUALS","GTE","LESS","LT","LESS_OR_EQUALS","LTE","NOT_EQUALS","NE","BETWEEN","AND","Consts","SQLObject","Conditions","args","arg","push","length","Disjunction","map","join","Conjunction","s","toString","Condition","column","operator","value","quoteTerm","quoteVal","Negation","InclusionOperator","inclusionType","Array","isArray","val","In","NotIn","GlobalNotIn","GlobalIn","Between","leftBoundary","rightBoundary","b","quoteBoundary","Operators","createCondition","Error","commonReplacer","console","error","Value","replace","Term","term","parts","split","Number","isFinite","SQLFunction","name","_curry_f","AggregateFunctions","count","any","anyLast","min","max","sum","avg","uniq","uniqCombined","uniqHLL12","uniqExact","groupArray","groupUniqArray","ArithmeticFunctions","plus","minus","multiply","divide","intDiv","intDivOrZero","modulo","negate","abs","TimeFunctions","toYear","toMonth","toDayOfMonth","toDayOfWeek","toHour","toMinute","toTime","toDate","toDateTime","toDateTime64","toStartOfDay","toStartOfMonth","toStartOfQuarter","toStartOfYear","toStartOfMinute","toStartOfFiveMinute","toStartOfHour","now","today","yesterday","IPAddrFunctions","toIPv4","toIPv6","IPv4NumToString","IPv4StringToNum","IPv4NumToStringClassC","IPv6NumToString","IPv6StringToNum","Raw","string","raw","Query","Select","tables","joins","conditions","having_conditions","preconditions","aggregations","select_list","order_expressions","request_totals","undefined","sampling","limits","limitbycolumns","fmt","columns","forEach","col","table","alias","Object","values","keys","type","condition","aggregateExpressions","a","number","offset","limit","expressions","e","c","from","prewhere","where","groupby","having","order_by","with_totals","sample","limitby","format","toUpperCase","filter","v","Queries","Utility","Shortcuts","And","Or","Eq","Ne","Gte","Lte","Lt","Gt","notIn","cast","thing","t","between","left","right","Dialect"],"mappings":"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","sourcesContent":["const EQUALS = \"=\";\nconst EQ = EQUALS;\nconst GREATER = \">\";\nconst GT = GREATER;\nconst GREATER_OR_EQUALS = \">=\";\nconst GTE = GREATER_OR_EQUALS;\nconst LESS = \"<\";\nconst LT = LESS;\nconst LESS_OR_EQUALS = \"<=\";\nconst LTE = LESS_OR_EQUALS;\nconst NOT_EQUALS = \"!=\";\nconst NE = NOT_EQUALS;\nconst BETWEEN = \"between\";\nconst AND = 'and'\n\nconst Consts = {\n  EQUALS,\n  GREATER,\n  GREATER_OR_EQUALS,\n  LESS,\n  LESS_OR_EQUALS,\n  NOT_EQUALS,\n  EQ,\n  GT,\n  GTE,\n  LT,\n  LTE,\n  NE,\n};\n\nclass SQLObject {\n}\n\nclass Conditions extends SQLObject {\n  constructor(...args) {\n    super();\n    this.args = args;\n  }\n\n  push(arg) {\n    this.args.push(arg);\n  }\n\n  get length() {\n    return this.args.length;\n  }\n}\n\nclass Disjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    return this.args.length ? this.args.map(arg => \"(\" + arg + \")\").join(\" or \") : \"\";\n  }\n}\n\nclass Conjunction extends Conditions {\n  constructor(...args) {\n    super(...args);\n  }\n\n  toString() {\n    if (!this.args.length) return \"\";\n\n    return this.args.map((arg) => {\n      const s = (arg.toString) ? arg.toString() : arg;\n      return \"(\" + s + \")\";\n    }).join(\" and \");\n  }\n}\n\nclass Condition extends SQLObject {\n  constructor(column, operator, value) {\n    super();\n    this.column = quoteTerm(column);\n    this.operator = operator;\n    this.value = (value instanceof SQLObject) ? value : quoteVal(value);\n  }\n\n  toString() {\n    if (this.operator) {\n      return [this.column, this.operator, this.value].join(' ');\n    } else {\n      return this.column;\n    }\n  }\n}\n\nclass Negation extends Condition {\n  constructor(column, operator, value) {\n    super(column, operator, value);\n  }\n\n  toString() {\n    return \"not(\" + super.toString() + \")\";\n  }\n}\n\nclass InclusionOperator extends Condition {\n  constructor(inclusionType, column, operator, value) {\n    super(column, operator, value);\n    this.operator = inclusionType;\n  }\n\n  toString() {\n    return [\n      quoteTerm(this.column),\n      \" \",\n      this.operator,\n      \" (\",\n      Array.isArray(this.value)\n        ? this.value.map(val => quoteVal(val)).join(',')\n        : this.value,\n      \")\"\n    ].join('');\n  }\n}\n\nclass In extends InclusionOperator {\n  constructor(...args) {\n    super(\"in\", ...args);\n  }\n}\n\nclass NotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"not in\", ...args);\n  }\n}\n\nclass GlobalNotIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global not in\", ...args);\n  }\n}\n\nclass GlobalIn extends InclusionOperator {\n  constructor(...args) {\n    super(\"global in\", ...args);\n  }\n}\n\nclass Between extends SQLObject {\n  constructor(column, leftBoundary, rightBoundary) {\n      super();\n      this.column = column;\n\n      this.leftBoundary = leftBoundary;\n      this.rightBoundary = rightBoundary;\n  }\n  quoteBoundary(b) {\n    return b instanceof SQLObject ? b.toString() : quoteVal(b);\n  }\n\n  toString() {\n    return [\n      quoteTerm(this.column),\n      \" \",\n      BETWEEN,\n      // because super class adding parents around value and I didn't find an elegant\n      // way how to avoid this. So I'm overloading toString() and copy-pasting implementation\n      this.quoteBoundary(this.leftBoundary),\n      AND,\n      this.quoteBoundary(this.rightBoundary)\n    ].join(' ');\n  }\n}\n\nconst Operators = {\n  Conjunction, Disjunction, Negation,\n  In, NotIn, GlobalIn, GlobalNotIn\n};\n\nfunction createCondition(...args) {\n  switch (args.length) {\n    case 1:\n      return args[0] instanceof Condition ? args[0] : new Condition(args[0]);\n    case 2:\n      return new Condition(args[0], EQUALS, args[1]);\n    case 3:\n      return new Condition(...args);\n    default:\n      throw new Error(\"Invalid condition args: \", args);\n  }\n}\n\nlet commonReplacer = [\n  /[\\0\\n\\r\\b\\t\\\\\\x1a]/g, (s) => {\n    switch (s) {\n      case \"\\0\":\n        return \"\\\\0\";\n      case \"\\n\":\n        return \"\\\\n\";\n      case \"\\b\":\n        return \"\\\\b\";\n      case \"\\r\":\n        return \"\\\\r\";\n      case \"\\t\":\n        return \"\\\\t\";\n      case \"\\\\\":\n        return \"\\\\\\\\\";\n      case \"\\x1a\" :\n        return \"\\\\Z\";\n      default:\n        console.error(\"uncovered case in replacer:\", s); return ''; //logic error\n    }\n  }\n];\n\nclass Value extends SQLObject {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  toString() {\n    if (typeof this.value === \"string\") {\n      return \"'\" + this.value.replace(...commonReplacer).replace(/'/g, \"''\") + \"'\";\n    }\n    if (typeof this.value === 'undefined') {\n      return \"''\";\n    }\n\n    if (Array.isArray(this.value)) {\n      return this.value.map(val => new Value(val)).join();\n    }\n\n    return this.value + '';\n  }\n}\n\nclass Term extends SQLObject {\n  constructor(term) {\n    super();\n    this.term = term;\n  }\n\n  toString() {\n    const parts = this.term.split('.');\n    if (parts.length > 1) {\n      return [new Term(parts[0]).toString(), new Term(parts[1]).toString()].join('.');\n    }\n\n    return '`' + this.term.replace(...commonReplacer).replace(/`/g, '\\\\`') + '`';\n  }\n}\n\nfunction quoteVal(value) {\n  return value instanceof SQLObject ? value : new Value(value);\n}\n\nfunction quoteTerm(term) {\n  return term instanceof SQLObject || Number.isFinite(term) ? term : new Term(term);\n}\n\n\nclass SQLFunction extends SQLObject {\n  constructor(name, ...args) {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  toString() {\n    return this.name +\n      \"(\" +\n      this.args.map((arg) => arg instanceof SQLObject || Number.isFinite(arg) ? arg : quoteTerm(arg)).join() +\n      \")\";\n  }\n}\n\nconst _curry_f = (name) => {\n  return (...args) => new SQLFunction(name, ...args)\n};\n\nconst AggregateFunctions = {\n  count: _curry_f('count'),\n  any: _curry_f('any'),\n  anyLast: _curry_f('anyLast'),\n  min: _curry_f('min'),\n  max: _curry_f('max'),\n  sum: _curry_f('sum'),\n  avg: _curry_f('avg'),\n  uniq: _curry_f('uniq'),\n  uniqCombined: _curry_f('uniqCombined'),\n  uniqHLL12: _curry_f('uniqHLL12'),\n  uniqExact: _curry_f('uniqExact'),\n  groupArray: _curry_f('groupArray'),\n  groupUniqArray: _curry_f('groupUniqArray')\n};\n\nconst ArithmeticFunctions = {\n  plus: _curry_f('plus'),\n  minus: _curry_f('minus'),\n  multiply: _curry_f('multiply'),\n  divide: _curry_f('divide'),\n  intDiv: _curry_f('intDiv'),\n  intDivOrZero: _curry_f('intDivOrZero'),\n  modulo: _curry_f('modulo'),\n  negate: _curry_f('negate'),\n  abs: _curry_f('abs')\n};\n\nconst TimeFunctions = {\n  toYear: _curry_f('toYear'),\n  toMonth: _curry_f('toMonth'),\n  toDayOfMonth: _curry_f('toDayOfMonth'),\n  toDayOfWeek: _curry_f('toDayOfWeek'),\n  toHour: _curry_f('toHour'),\n  toMinute: _curry_f('toMinute'),\n  toTime: _curry_f('toTime'),\n  toDate: _curry_f('toDate'),\n  toDateTime: _curry_f('toDateTime'),\n  toDateTime64: _curry_f('toDateTime64'),\n  toStartOfDay: _curry_f('toStartOfDay'),\n  toStartOfMonth: _curry_f('toStartOfMonth'),\n  toStartOfQuarter: _curry_f('toStartOfQuarter'),\n  toStartOfYear: _curry_f('toStartOfYear'),\n  toStartOfMinute: _curry_f('toStartOfMinute'),\n  toStartOfFiveMinute: _curry_f('toStartOfFiveMinute'),\n  toStartOfHour: _curry_f('toStartOfHour'),\n\n  now: _curry_f('now'),\n  today: _curry_f('today'),\n  yesterday: _curry_f('yesterday')\n};\n\nconst IPAddrFunctions = {\n  toIPv4: _curry_f('toIPv4'),\n  toIPv6: _curry_f('toIPv6'),\n  IPv4NumToString: _curry_f('IPv4NumToString'),\n  IPv4StringToNum: _curry_f('IPv4StringToNum'),\n  IPv4NumToStringClassC: _curry_f('IPv4NumToStringClassC'),\n  IPv6NumToString: _curry_f('IPv6NumToString'),\n  IPv6StringToNum: _curry_f('IPv6StringToNum')\n};\n\nclass Raw extends SQLObject {\n  constructor(string) {\n    super();\n    this.raw = string;\n  }\n\n  toString() {\n    return this.raw;\n  }\n}\n\nclass Query extends SQLObject {\n}\n\nclass Select extends Query {\n  constructor() {\n    super();\n\n    this.tables = [];\n    this.joins = [];\n    this.conditions = new Conjunction();\n    this.having_conditions = new Conjunction();\n    this.preconditions = new Conjunction();\n    this.aggregations = [];\n    this.select_list = [];\n    this.order_expressions = [];\n    this.request_totals = undefined;\n    this.sampling = undefined;\n    this.limits = undefined;\n    this.limitbycolumns = undefined;\n    this.fmt = undefined;\n  }\n\n  select(...columns) {\n    if (columns.length === 0) {\n      return this.select_list;\n    }\n\n    columns.forEach((col) => this.select_list.push(col));\n    return this;\n  }\n\n  /**\n   * @usage\n   *  q = selectBuilder->from('table0', ['table1', 'alias1'], { 'table2' : 'alias2'})->toString()\n   *  assertEquals(q, \"select * from table0, table1 as alias1, table2 as alias2\");\n   *\n   * @param tables\n   * @return {Select|Array}\n   */\n  from(...tables) {\n    if (!tables.length) {\n      return this.tables;\n    }\n\n    tables = tables.map(table => {\n      if (typeof table === \"string\") return [quoteTerm(table)];\n      if (Array.isArray(table)) {\n        if (table[0] instanceof Select) table[0] = '(' + table[0].toString() + ')';\n        else table[0] = quoteTerm(table[0]);\n        table[1] = quoteTerm(table[1]);\n        return table;\n      }\n      if (table instanceof Select) return ['(' + table.toString() + ')'];\n\n      let alias = Object.values(table)[0];\n      if (alias instanceof Select) alias = '(' + alias.toString() + ')';\n      else alias = quoteTerm(alias);\n\n      return [alias, quoteTerm(Object.keys(table)[0])];\n    });\n\n    this.tables = tables;\n    return this;\n  }\n\n  join(table, type, ...conditions) {\n    if (typeof table === \"string\") table = quoteTerm(table);\n\n    if (!Array.isArray(conditions)) {\n      conditions = [conditions];\n    }\n\n    if (conditions.length > 1) {\n      conditions = Conjunction(conditions);\n    }\n\n    this.joins.push({ table, type, conditions });\n    return this;\n  }\n\n  prewhere(...args) {\n    this.preconditions.push(createCondition(...args));\n    return this;\n  }\n\n  orPrewhere(...args) {\n    let condition = createCondition(...args);\n    if (this.preconditions.length) {\n      this.preconditions = new Disjunction(this.preconditions, condition)\n    } else {\n      this.preconditions.push(condition)\n    }\n\n    return this;\n  }\n\n  where(...args) {\n    if (args.length === 1 && args[0] instanceof Condition) {\n      this.conditions.push(args[0]);\n    } else {\n      this.conditions.push(createCondition(...args));\n    }\n    return this;\n  }\n\n  orWhere(...args) {\n    let condition = createCondition(...args);\n    if (this.conditions.length) {\n      this.conditions = new Disjunction(this.conditions, condition)\n    } else {\n      this.conditions.push(condition);\n    }\n\n    return this;\n  }\n\n  groupBy(...aggregateExpressions) {\n    aggregateExpressions.forEach(a => this.aggregations.push(a));\n    return this;\n  }\n\n  withTotals(request_totals = true) {\n    this.request_totals = request_totals;\n    return this;\n  }\n\n  limit(number, offset) {\n    this.limits = {\n      number, offset\n    };\n    return this;\n  }\n\n  limitBy(limit, ...columns) {\n    this.limitbycolumns = {\n      limit, columns\n    };\n    return this;\n  }\n\n  orderBy(...expressions) {\n    expressions.forEach(e => this.order_expressions.push(e));\n    return this;\n  }\n\n  format(fmt) {\n    this.fmt = fmt;\n    return this;\n  }\n\n  toString() {\n    let select_list;\n    if (this.select_list.length === 0) {\n      select_list = \"*\";\n    } else {\n      select_list = this.select_list.map(\n        c => Array.isArray(c)\n          ? quoteTerm(c[0]) + ' as ' + quoteTerm(c[1])\n          : quoteTerm(c)\n      ).join();\n    }\n\n    let from = this.from().map(\n      (table) =>\n        table.length === 1\n          ? table[0]\n          : table[0] + ' as ' + table[1]\n    );\n    from = from.length ? \"from \" + from.join() : \"\";\n\n    let join = this.joins.map((join) => {\n      return ((join.type) ? join.type + ' ' : '') + 'join ' + join.table + ' on ' + join.conditions;\n    }).join(' ');\n\n    let prewhere = this.preconditions.length ? \"prewhere \" + this.preconditions : \"\";\n    let where = this.conditions.length ? \"where \" + this.conditions : \"\";\n\n    let groupby = this.aggregations.length\n      ? \"group by \" + this.aggregations.map(c => quoteTerm(c)).join()\n      : \"\";\n\n    let having = this.having_conditions.length ? \"having \" + this.having_conditions : \"\";\n\n    let order_by = this.order_expressions.length\n      ? \"order by \" + this.order_expressions.map(e => Array.isArray(e) ? quoteTerm(e[0]) + \" \" + e[1] : quoteTerm(e)).join()\n      : \"\";\n\n    let with_totals = this.request_totals ? \"with totals\" : \"\";\n    let sample = this.sampling ? \"sample \" + this.sampling : \"\";\n\n    let limitby = this.limitbycolumns && this.limitbycolumns.columns.length\n      ? \"limit \" + this.limitbycolumns.limit + \" by \" + this.limitbycolumns.columns.map(c => quoteTerm(c)).join()\n      : '';\n\n\n    let limit = this.limits\n      ? \"limit \" + ((typeof this.limits.offset === \"undefined\") ? this.limits.number : this.limits.offset + \", \" + this.limits.number)\n      : '';\n\n    let format = this.fmt\n      ? \" format \" + this.fmt.toUpperCase()\n      : \"\";\n\n    const parts = [\n      \"select\",\n      select_list,\n      from,\n      join,\n      sample,\n      prewhere,\n      where,\n      groupby,\n      with_totals,\n      having,\n      order_by,\n      limitby,\n      limit,\n      format,\n    ].filter((v) => v != '');\n\n    return parts.join(' ');\n  }\n}\n\n\nconst Queries = {\n  Select\n};\n\n\nconst Utility = {\n  quoteVal, val: quoteVal,\n  quoteTerm, term: quoteTerm,\n  raw: (s) => new Raw(s),\n  Condition: (...args) => new Condition(...args),\n};\n\n\nconst Shortcuts = {\n  And: (...args) => new Conjunction(...args),\n  Or: (...args) => new Disjunction(...args),\n  Eq: (col, val) => new Condition(col, Consts.EQ, val),\n  Ne: (col, val) => new Condition(col, Consts.NE, val),\n  Gte: (col, val) => new Condition(col, Consts.GTE, val),\n  Lte: (col, val) => new Condition(col, Consts.LTE, val),\n  Lt: (col, val) => new Condition(col, Consts.LT, val),\n  Gt: (col, val) => new Condition(col, Consts.GT, val),\n  in: (col, values) => new In(col, null, values),\n  notIn: (col, values) => new NotIn(col, null, values),\n  cast: (thing, t) => new SQLFunction('cast', thing, quoteVal(t)),\n  between: (col, left, right) => new Between(col, left, right)\n};\n\n\nconst Dialect = {\n  ...Operators,\n  ...AggregateFunctions,\n  ...ArithmeticFunctions,\n  ...TimeFunctions,\n  ...IPAddrFunctions,\n  ...Consts,\n  ...Queries,\n  ...Utility,\n  ...Shortcuts,\n};\nexport default Dialect;\n"],"file":"index.js"}